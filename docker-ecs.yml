application:
  interfaces:
    cluster-config:
      '*': bind(cluster#input.*)
    docker: 
      '*': bind(docker-service-adapter#docker.*)
    cluster-info:
      '*': bind(cluster#result.*)
  configuration: 
    cluster-config.ami-image: us-east-1/ami-b540eade
    cluster-config.instance-type: m3.medium
    cluster-config.size: 1
  bindings:
    - [aws-ca, cluster]
    - [aws-ca, docker-service-adapter]
    - [cluster, docker-service-adapter]
  components:
    aws-ca:
      type: reference.Service
      interfaces:
        dynamic:
          amazon-api-call: receive-command(string method, string endpoint, map<string, string> headers, string body => string body)
    docker-service-adapter:
      type: cobalt.docker.AmazonEcsService
    cluster:
      type: workflow.Instance
      interfaces: 
        input:
          ami-image: 
            type: configuration(string)
            suggestions:
              us-east-1: us-east-1/ami-b540eade
              eu-west-1: eu-west-1/ami-2aaef35d
          instance-type: 
            type: configuration(string)
            suggestions:
              m3.medium: m3.medium
              c3.large: c3.large
          size: configuration(int)
        aws-ca:
          amazon-api-call: send-command(string method, string endpoint, map<string, string> headers, string body => string body)
        result:
          ecs-cluster-name: publish-signal(string)
          ecs-cluster-arn: publish-signal(string)
          ecs-cluster-nodes: publish-signal(list<string>)
      required: [aws-ca]
      configuration:
        configuration.propagateStatus: [update]
        configuration.triggers:
          input.size: update
        configuration.workflows:
          launch: 
            steps: 
              - get-instance-id:
                  action: getInstanceContext
                  output:
                    instanceId: instanceId
              - create-cluster:
                  action: aws-ca.amazon-api-call
                  precedingPhases: [ get-instance-id ]
                  parameters:
                    method: POST
                    endpoint: http://ecs.us-east-1.amazonaws.com/  # TODO zone-dependent
                    headers:
                      X-Amz-Target: AmazonEC2ContainerServiceV20141113.CreateCluster
                      Content-Type: application/x-amz-json-1.1
                    body: ' {{ "clusterName": "tonomi-cluster-{$.instanceId}" }} '
                  output:
                    create-response: body
              - scale: &scale-step
                  action: provisionVms
                  precedingPhases: [ create-cluster ]
                  parameters:
                    imageId: '{$.ami-image}'
                    hardwareId: '{$.instance-type}'
                    targetQuantity: '{$.size}'
                    providerSettings:
                      iamRole: ecsInstanceRole
                      userData:
                        |
                          #!/bin/bash
                          echo ECS_CLUSTER=tonomi-cluster-{$.instanceId} >> /etc/ecs/ecs.config
                  output:
                    ips: ips
            return:
              ecs-cluster-arn: 
                value: "{$.create-response.cluster.clusterArn}"
              ecs-cluster-name:
                value: "{$.create-response.cluster.clusterName}"
              ecs-cluster-nodes:
                value: "{$.ips}"

          update:
            steps: 
              - get-instance-id:
                  action: getInstanceContext
                  output:
                    instanceId: instanceId            
              - create-cluster:
                  action: wait
                  parameters:
                    delay: 0 seconds
              - scale: *scale-step
            return:
              ecs-cluster-nodes:
                value: "{$.ips}"


          destroy:
            steps:
              - kill-vms:
                  action: undeployEnv
              - get-instance-id:
                  action: getInstanceContext
                  output:
                    instanceId: instanceId                  
              - destroy-cluster:
                  action: aws-ca.amazon-api-call
                  precedingPhases: [ kill-vms, get-instance-id ]
                  parameters:
                    method: POST
                    endpoint: http://ecs.us-east-1.amazonaws.com/  # TODO zone-dependent
                    headers: 
                      X-Amz-Target: AmazonEC2ContainerServiceV20141113.DeleteCluster
                      Content-Type: application/x-amz-json-1.1
                    body: ' {{ "cluster": "tonomi-cluster-{$.instanceId}" }} '
